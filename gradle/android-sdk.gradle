configurations {
    androidSdk {
        visible = false
    }
}

repositories {
    ivy {
        url = "https://dl.google.com/android/repository/"
        content {
            includeGroup "android"
        }
        patternLayout {
            artifact "[module]-[revision].[ext]"
        }
        metadataSources {
            artifact()
        }
    }
}

dependencies {
    androidSdk(group: "android", name: "commandlinetools-${osName}", version: androidSdkCommandlineToolsVersion, ext: "zip")
}

def androidSdkRootDir = "${gradle.gradleUserHomeDir}/android-sdk"
def androidSdkCommandlineToolsDir = "${androidSdkRootDir}/cmdline-tools/latest/"
def androidSdkCommandlineToolsBinDir = "${androidSdkCommandlineToolsDir}/bin"

def installAndroidSdkCommandlineToolsTask = tasks.register("installAndroidSdkCommandlineTools") {
    group("android-sdk")

    dependsOn(configurations.androidSdk)

    onlyIf { !file(androidSdkCommandlineToolsDir).exists() }

    doFirst {
        copy {
            into(androidSdkCommandlineToolsDir)
            configurations.androidSdk.each {
                from(zipTree(it)) {
                    eachFile {
                        path = path.replaceFirst(/[^\/]+\/(.+)/, '$1')
                        return it
                    }
                }
            }
        }
    }
}


def installAndroidSdkPackagesTask = tasks.register("installAndroidSdkPackages", Exec) {
    group("android-sdk")

    dependsOn(installAndroidSdkCommandlineToolsTask)

    def packagesFile = file("${androidSdkRootDir}/.packages")
    onlyIf { !packagesFile.exists() || packagesFile.text != androidSdkPackages as String}

    workingDir(androidSdkCommandlineToolsBinDir)
    commandLine(createAndroidSdkCommandLine("sdkmanager"))
    args(androidSdkPackages)
    environment(createAndroidSdkEnvironment())
    standardInput = new ByteArrayInputStream("y".bytes)
    standardOutput = new ByteArrayOutputStream()
    doLast {
        packagesFile.text = androidSdkPackages as String
    }
}

tasks.register("createAndroidSdkDevice", Exec) {
    group("android-sdk")

    dependsOn([installAndroidSdkPackagesTask])

    def deviceFile = file("${androidSdkRootDir}/.${project.name}.avd")
    def deviceInfo = "${androidSdkAvdDevice}-${androidSdkSystemImage}"
    onlyIf { !deviceFile.exists() || deviceFile.text != deviceInfo }


    workingDir(androidSdkCommandlineToolsBinDir)
    environment([ ANDROID_SDK_ROOT: androidSdkRootDir, ANDROID_HOME: androidSdkHomeDir ])
    commandLine(createAndroidSdkCommandLine("avdmanager"))
    args([
            "create", "avd",
            "-n", project.name,
            "-d", androidSdkAvdDevice,
            "-k", androidSdkSystemImage,
            "--force"
    ])

    doLast {
        deviceFile.text = deviceInfo
    }
}

@SuppressWarnings('GrMethodMayBeStatic') // osName ist nicht static
def createAndroidSdkCommandLine(command) {
    if (osName == "win") {
        if (!(command =~ /.+\..+/)) {
            command = "${command}.bat"
        }
        return  [ 'cmd', "/c", "${command}" ]
    }
    
    return "./${command}" 
}

@SuppressWarnings('GrMethodMayBeStatic') // osName ist nicht static
def createAndroidSdkEnvironment() {
    def environment = [ ANDROID_SDK_ROOT: androidSdkRootDir, ANDROID_HOME: androidSdkHomeDir ]
    if (osName == "win") {
        return environment + [ Path: "${gradle.gradleHomeDir}\\bin;${androidSdkRootDir}\\platform-tools;${androidSdkRootDir}\\emulator;${System.env.Path}"]
    } else {
        return environment + [ PATH: "${gradle.gradleHomeDir}/bin:${androidSdkRootDir}/platform-tools:${androidSdkRootDir}/emulator:${System.env.PATH}"]
    }
}

