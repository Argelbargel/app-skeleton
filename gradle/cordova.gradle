def cordovaVersionFile = file("${node.workDir}/.cordovaVersion")

def installCordovaTask = tasks.register("installCordova", NpmTask) {
    group("build setup")
    dependsOn(tasks.named("npmSetup"))

    onlyIf { !cordovaVersionFile.exists() || cordovaVersionFile.text != cordovaVersion }
    args = [ 'install', "cordova@${cordovaVersion}", '-g' ]

    doLast {
        cordovaVersionFile.text = cordovaVersion
    }
}

def createCordovaAppTask = tasks.register("createCordovaApp", NpxTask) {
    group("build setup")

    dependsOn(installCordovaTask)

    onlyIf { !file(cordovaAppDir).exists() }
    command = "cordova"
    args = createCordovaNpxArgs([ "create", file(cordovaAppDir).name, project.group, project.name ])
}

def addCordovaAndroidPlatformTask = tasks.register("addCordovaAndroidPlatform", NpxTask) {
    group("build setup")

    dependsOn(tasks.named("createAndroidSdkDevice"))

    onlyIf { !file("${cordovaAppDir}/platforms/android").exists() }
    mustRunAfter createCordovaAppTask

    command = "cordova"
    args = createCordovaNpxArgs([ "platform", "add", "android" ])
    workingDir = file(cordovaAppDir)
}

def addCordovaPlatformsTask = tasks.register("addCordovaPlatforms") {
    group("build setup")

    dependsOn(addCordovaAndroidPlatformTask)
}

def checkCordovaRequirementsTask = tasks.register("checkCordovaRequirements", NpxTask) {
    group("cordova")

    command = "cordova"
    args = createCordovaNpxArgs("requirements")
    workingDir = file(cordovaAppDir)
    environment = getCordovaEnvironment()
}

tasks.register("initCordova") {
    group("cordova")
    dependsOn([createCordovaAppTask, addCordovaPlatformsTask, checkCordovaRequirementsTask])
}


tasks.register("cordovaBuild", NpxTask) {
    group("cordova")

    it.inputs.dir("${cordovaAppDir}/platforms/android/cordova")
    it.inputs.dir("${cordovaAppDir}/platforms/android/CordovaLib")
    it.inputs.dir("${cordovaAppDir}/platforms/android/platform_www")
    it.inputs.file("${cordovaAppDir}/platforms/android/android.json")
    it.inputs.file("${cordovaAppDir}/platforms/android/build.gradle")
    it.inputs.file("${cordovaAppDir}/platforms/android/gradle.properties")
    it.inputs.file("${cordovaAppDir}/platforms/android/project.properties")
    it.inputs.file("${cordovaAppDir}/platforms/android/settings.gradle")

    it.inputs.dir("${cordovaAppDir}/plugins")
    it.inputs.dir("${cordovaAppDir}/www")
    it.inputs.file("${cordovaAppDir}/config.xml")
    it.inputs.file("${cordovaAppDir}/package.json")
    it.inputs.file("${cordovaAppDir}/package-lock.json")

    it.outputs.dir("${cordovaAppDir}/platforms/android/app/build")

    command = "cordova"
    args = createCordovaNpxArgs("build")
    workingDir = file(cordovaAppDir)
    environment = getCordovaEnvironment()
}

tasks.register("cordovaEmulate", NpxTask).configure {
    group("cordova")

    command = "cordova"
    args = createCordovaNpxArgs(["emulate"])
    workingDir = file(cordovaAppDir)
    environment = getCordovaEnvironment()
}

tasks.register("cordovaServe", NpxTask).configure {
    group("cordova")

    command = "cordova"
    args = createCordovaNpxArgs("serve")
    workingDir = file(cordovaAppDir)
    environment = getCordovaEnvironment()
}

def getCordovaEnvironment() {
    def environment = [ ANDROID_SDK_ROOT: androidSdkRootDir, ANDROID_HOME: androidSdkHomeDir ]
    if (osName == "windows") {
        return environment + [ Path: "${System.env.Path};${gradle.gradleHomeDir}\\bin;${androidSdkRootDir}\\platform-tools;${androidSdkRootDir}\\tools"]
    } else {
        return environment + [ PATH: "${System.env.PATH}:${gradle.gradleHomeDir}/bin:${androidSdkRootDir}/platform-tools:${androidSdkRootDir}/tools"]
    }
}

def static createCordovaNpxArgs(args) {
    if (!(args instanceof Collection)) {
         args = [ args ]
    }
    return args + [ "--no-telemetry", "--no-install" ]
}
